#+BEGIN_HTML
  <div id="MathJax_Message" style="display: none;">
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  <div class="container-lg px-3 my-5 markdown-body">
#+END_HTML

* IMPORTANT NOTES
- You are not required to write *catch* tests for this lab
- You still need the Makefile with the *main* target
- When run, main should read from *cin* and output to *cout* as
  described in the lab
- Please include a sample source file named *testprog.cpp* which will
  be used as input to test your lab. It should demonstrate that the
  lab works as specified

* Lab 7. A Pretty-printing / Automatic Style Program
  :PROPERTIES:
  :CUSTOM_ID: lab-7-a-pretty-printing--automatic-style-program
  :END:

In this lab, we will develop a small utility program that can fix
indentation in C or C++ source code files. It will have some
limitations, but it will be able to cover a significant subset of valid
C++ programs. Specifically, given a file with messed up indentation
style:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
                    int main(){ 
               // Hi, I'm a program!
    int x = 1; 
        for(int i = 0; i < 10; i++) {
    cout << i;
              cout << endl;
     }
        }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

It will output a well-formatted program:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
        } 
    }     
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

** Task A. Removing indentation

Before we make a program that indents source code files, let's make a
program that unindents them.

Start by writing a function

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    string removeLeadingSpaces(string line);
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

that takes one line of code as input and returns its copy /without
leading spaces and tabs/:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    removeLeadingSpaces("       int x = 1;  ") == "int x = 1;  "
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

Make use of the function
[[http://www.cplusplus.com/reference/cctype/isspace/][=isspace=]]
defined in =<cctype>= to check if a character is a whitespace. Your
function should probably iterate over the input string, skip all spaces,
and after it finds the first non-space character, start accumulating the
characters into a new string, which will be returned.

Write a program (executable named main) that reads input from =cin= and prints
out each input line with leading spaces removed. 

You are not required to make catch tests for this lab.

*** Example:

To test, create a badly indented file, for instance, called
=bad-code.cpp=:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
                    int main(){
               // Hi, I'm a program!
    int x = 1; 
        for(int i = 0; i < 10; i++) {
    cout << i;
              cout << endl;
     }
        }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

Since our =unindent= program reads its input from =cin=, the badly
indented text can be fed into it using standard input redirection:

#+BEGIN_HTML
  <div class="highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    $ ./unindent < bad-code.cpp
    int main(){
    // Hi, I'm a program!
    int x = 1; 
    for(int i = 0; i < 10; i++) {
    cout << i;
    cout << endl;
    }
    }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

** Task B. Counting blocks opened and closed by ={= and =}=, and adding
real indentation

To count open blocks, we need to count how many curly braces get opened
and closed on each line, so we need to count ={= and =}=

Write a function

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    int countChar(string line, char c);
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

that scans the =line= and returns the number of occurrences of the
character =c=.

Enance your TASK A program to use this feature. As it reads the input line by line, it should also count
the number of open and closed ={= =}= in it, and keep track of *how many
blocks is currently open at the beginning of each line*.

In the listing below, the number of open blocks is shown on the left:

#+BEGIN_HTML
  <div class="highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    0   int main(){
    1   // Hi, I'm a program!
    1   int x = 1; 
    1   for(int i = 0; i < 10; i++) {
    2   cout << i;
    2   cout << endl;
    2   }
    1   }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

Then instead of printing the number of open blocks, add that number of
tabs ='\t'= at the beginning of each line, and you will get:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
            } // <-- closing for loop
        }     // <-- closing main
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

Notice that the closing curly braces are indented one level further than
what they should be.

To fix that, when indenting the line, check its very first character. If
it is a closing curly brace =}=, its indentation level should be reduced
by one:

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    int main(){
        // Hi, I'm a program!
        int x = 1; 
        for(int i = 0; i < 10; i++) {
            cout << i;
            cout << endl;
        } 
    }     
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

** Shortcomings of our
program:[[https://maryash.github.io/135/labs/lab_07.html#shortcomings-of-our-program][]]
   :PROPERTIES:
   :CUSTOM_ID: shortcomings-of-our-program
   :END:

-  No support for loops and if statements that don't have curly braces.
   For example,

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    if (c == 'A')
        s = s + c;
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

will be incorrectly indented as

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    if (c == 'A')
    s = s + c;
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

-  No support for =//= and =/* */=. Commented out curly braces should
   not affect indentation

-  Symbols ={=, =}= inside =string= and =char= literals are
   misinterpreted as blocks

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    if (true) {
        s = "\{\{";
        t = "ABC";
    }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

will be incorrectly indented as

#+BEGIN_HTML
  <div class="language-c++ highlighter-rouge">
#+END_HTML

#+BEGIN_HTML
  <div class="highlight">
#+END_HTML

#+BEGIN_EXAMPLE
    if (true) {
        s = "\{\{";
                t = "ABC";
            }
#+END_EXAMPLE

#+BEGIN_HTML
  </div>
#+END_HTML

#+BEGIN_HTML
  </div>
#+END_HTML

** How to submit your programs

Create a Makefile (as per usual) but you do not need a *test*
target, only a *main* target. 

When *main* is run, your program should read from *cin* and output the
new indented program. 

Please include a sample test source file named ~testprog.cpp~ in your
repo.  
